---
import Layout from '../../layouts/BlogLayout.astro'
import { Icon } from 'astro-icon';
export async function getStaticPaths() {
  const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;
  const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
  const { results: posts } = await fetch(`https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams({ apiKey: builderAPIpublicKey, fields: ["data.slug", "data.title"].join(","), cachebust: "true",}).toString()}`).then((res) => res.json()).catch();
  return [...posts.map(({ data: { slug, title } }) => [ { params: { slug }, props: { title }}])];
}
const { slug } = Astro.params;
const { title } = Astro.props;
const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;
const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
// Builder's API requires this field but for this use case the url doesn't seem to matter - the API returns the same HTML
const encodedUrl = encodeURIComponent("moot");
const { html: postHTML } = await fetch(`https://cdn.builder.io/api/v1/qwik/${builderModel}?${new URLSearchParams({  apiKey: builderAPIpublicKey,  url: encodedUrl,  "query.data.slug": slug,  cachebust: "true",}).toString()}`) .then((res) => res.json()) .catch();

---
<Layout lang='en' title={title}>
  <!-- <div class=`w-full flex justify-center bg-primary min-h-[100vh] md:pt-5`>
    <div class="md:w-[50vw] bg-primary border border-secondary border-b-0 rounded-b-none md:rounded-lg">
      <div class="w-full h-10 bg-secondary border-secondary border flex items-center md:px-6 justify-between">
        <a href="/blog" class="w-full"><Icon
            name="ph:arrow-fat-left-fill"
            class="text-primary max-w-[30px]"/></a>
        <div class="text-primary font-bold w-full mr-16 md:text-lg">
          {title}
        </div>
        <div class="text-primary">2020/09/22</div>
      </div>
      <div class="md:px-7 px-3"> -->
        <Fragment set:html={postHTML} />
      <!-- </div>
    </div>
  </div> -->
</Layout>

<style is:global>span ,strong, em, h1, h2, h3, h4, h5, h6, p {color: var(--secondaryColor);font-size:24px !important;}</style>
